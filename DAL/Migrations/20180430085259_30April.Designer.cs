// <auto-generated />
using DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace DAL.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20180430085259_30April")]
    partial class _30April
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.1-rtm-125")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DomainModels.Entities.City", b =>
                {
                    b.Property<int>("CityID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CityName");

                    b.Property<int?>("StateID");

                    b.HasKey("CityID");

                    b.HasIndex("StateID");

                    b.ToTable("City");
                });

            modelBuilder.Entity("DomainModels.Entities.Country", b =>
                {
                    b.Property<int>("CountryID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CountryName");

                    b.HasKey("CountryID");

                    b.ToTable("Country");
                });

            modelBuilder.Entity("DomainModels.Entities.Employee", b =>
                {
                    b.Property<int>("EmployeeID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("City");

                    b.Property<string>("EmployeeName");

                    b.Property<bool>("IsActive");

                    b.Property<DateTime>("JoiningDate");

                    b.Property<int>("Salary");

                    b.HasKey("EmployeeID");

                    b.ToTable("Employee");
                });

            modelBuilder.Entity("DomainModels.Entities.EmployeeContact", b =>
                {
                    b.Property<int>("EmployeeContactID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address");

                    b.Property<int?>("EmployeeID");

                    b.Property<string>("Phone");

                    b.HasKey("EmployeeContactID");

                    b.HasIndex("EmployeeID");

                    b.ToTable("EmployeeContact");
                });

            modelBuilder.Entity("DomainModels.Entities.State", b =>
                {
                    b.Property<int>("StateID")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("CountryID");

                    b.Property<string>("StateName");

                    b.HasKey("StateID");

                    b.HasIndex("CountryID");

                    b.ToTable("State");
                });

            modelBuilder.Entity("DomainModels.Entities.User", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Email");

                    b.Property<string>("FirstName");

                    b.Property<string>("LastName");

                    b.Property<string>("Password");

                    b.Property<string>("UserName");

                    b.HasKey("ID");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("DomainModels.Entities.City", b =>
                {
                    b.HasOne("DomainModels.Entities.State", "State")
                        .WithMany()
                        .HasForeignKey("StateID");
                });

            modelBuilder.Entity("DomainModels.Entities.EmployeeContact", b =>
                {
                    b.HasOne("DomainModels.Entities.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeID");
                });

            modelBuilder.Entity("DomainModels.Entities.State", b =>
                {
                    b.HasOne("DomainModels.Entities.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryID");
                });
#pragma warning restore 612, 618
        }
    }
}
